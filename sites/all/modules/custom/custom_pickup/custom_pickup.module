<?php
/**
 * @file
 * Handles all of the custom pickup functions
 */

/**
 * Implements hook_menu().
 */
function custom_pickup_menu()
{
    $items = array();
    
    $items['pickup'] = array(
        'title' => 'Rides Available',
        'page callback' => 'custom_pickup_output',
        'access arguments' => array(
            'access content'
        )
    );
    
    $items['pickup/admin'] = array(
        'title' => 'Rides Available',
        'page callback' => 'custom_pickup_output',
        'access arguments' => array(
            'access content'
        )
    );
    
    $items['pickup/get_customer_loc'] = array(
        'title' => 'Customer location',
        'page callback' => 'custom_pickup_get_customer_loc',
        'access arguments' => array(
            'access content'
        )
    );
    
    $items['pickup/get_avail_drivers_location'] = array(
        'title' => 'Driver location',
        'page callback' => 'custom_pickup_get_driver_loc',
        'access arguments' => array(
            'access content'
        )
    );
    $items['edit_schedule']                     = array(
        'title' => 'Driver location',
        'page callback' => 'editschedule',
        'access arguments' => array(
            'access content'
        )
    );
    $items['delete_schedule/%']                 = array(
        'title' => 'Driver location',
        'page callback' => 'deleteschedule',
        'access arguments' => array(
            1
        ),
        'access callback' => TRUE
        
    );
    $items['getEstimatedTimeCalc']              = array(
        'title' => 'Driver location',
        'page callback' => 'getEstimatedTime',
        'access callback' => TRUE
        
    );
    $items['testCancelRide']                    = array(
        'title' => 'Cancel Ride Test',
        'page callback' => 'custom_pickup_test_cancel_ride',
        'access callback' => TRUE
        
    );
    $items['noti_test']                         = array(
        'title' => 'Cancel Ride Test',
        'page callback' => 'noti_test',
        'access callback' => TRUE
        
    );
    $items['manual_user_reg']                   = array(
        'title' => 'Manual User Registration',
        'page callback' => 'manual_user_reg',
        'access callback' => TRUE
        
    );
    $items['custom/ride_alert']                  = array(
        'title' => 'Manual User Ride Alert',
        'page callback' => 'rideAlert',
        'access callback' => TRUE
        
    );
    $items['ridestatus']                        = array(
        'title' => 'Ride Accept Status',
        'page callback' => 'userRideStatus',
        'access callback' => TRUE
    );
    $items['send_ios_notification']                        = array(
        'title' => 'IOS notification test',
        'page callback' => 'send_ios_notification',
        'access callback' => TRUE
    );
    return $items;
}

/**
 * Custom Driver Alert Manual Call
 */
function rideAlert()
{
   // $node_type = 'towncar_application_driver';
    $node_type = 'ride_booker';
    // Select the nodes that we want to delete.
    $result = db_select('node', 'n')
              ->fields('n', array('nid'))
              ->condition('type', $node_type, '=')
              ->execute();
    $deleted_count = 0;
    foreach ($result as $record) {
    echo $record->nid . '<br>';
      node_delete($record->nid);
      $deleted_count++;
      if($deleted_count == 10000){
      echo "$deleted_count nodes have been deleted";
      exit();
      }
    }
    // Simple debug message so we can see what had been deleted.
   // drush_print("$deleted_count nodes have been deleted");
  //  custom_pickup_driver_alert(910968, 17, array(8));
}
/**
 * Custom Driver Check for every ride request
 */
function userRideStatus()
{
    // echo $_GET['nid']; die;
    if ($_GET['nid'] != '') {
        $node = node_load($_GET['nid']);
        if (empty($node->field_car_driver)) {
            echo 1;
            die; //driver not assigned
        } else {
            echo 0;
            die; //driver assigned
        }
    }
}
/**
 * Implementation of manual registration for user().
 */
function manual_user_reg()
{
    for ($i = 1; $i <= 200; $i++) {
        $username = 'user' . $i;
        $email    = 'user' . $i . '@gmail.com';
        $fields   = array(
            'name' => $username,
            'mail' => $email,
            'pass' => '123456',
            'status' => 1,
            'timezone' => 'America/New_York',
            'init' => $email,
            'signature_format' => 'filtered_html',
            'roles' => array(
                DRUPAL_AUTHENTICATED_RID => 'authenticated user',
                5 => 'Customer'
            )
        );
        $account  = user_save('', $fields);
        echo '<pre>';
        print_r($account);
        echo '</pre>';
    }
    die;
}
/**
 * Implementation of hook_menu().
 */
function drupalform_costestimation($form, &$form_state)
{
    $form = array();
    $id   = 0;
    if (!empty($_REQUEST['driver']))
        $id = $_REQUEST['driver'];
    $form['driver_id']      = array(
        '#type' => 'hidden',
        '#value' => $id
    );
    $form['origin']         = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'placeholder' => t('Location to start Ride')
        )
    );
    $form['destination']    = array(
        '#type' => 'textfield',
        '#attributes' => array(
            'placeholder' => t('Enter Address, City')
        )
    );
    $form['submit']         = array(
        '#type' => 'submit',
        '#ajax' => array(
            'callback' => 'cost_estimation',
            'wrapper' => 'estimated_cost'
        ),
        '#value' => t('Submit')
    );
    $form['estimated_cost'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="estimated_cost">',
        '#suffix' => '</div>'
    );
    return $form;
}

/**
 * Submit cost_estimation save action.
 */
function cost_estimation($form, &$form_state)
{
    $origin      = $form_state['values']['origin'];
    $destination = $form_state['values']['destination'];
    if (($origin != "") && ($destination != "")) {
        $destination = str_replace(" ", "", $destination);
        $origin      = str_replace(" ", "", $origin);
        $url         = file_get_contents("https://maps.googleapis.com/maps/api/distancematrix/json?origins=" . $origin . "&destinations=" . $destination . "&mode=driving&key=AIzaSyANcfVWxkbdYX6I9TOiWMagQmn9V30GmoQ");
        $decoded     = json_decode($url);
        $status      = $decoded->rows[0]->elements[0]->status;
        if ($status == 'NOT_FOUND' || $status == 'ZERO_RESULTS') {
            $message = "Enter complete and proper address for both the fields.";
        } else {
            $origin      = $decoded->origin_addresses[0];
            $destination = $decoded->destination_addresses[0];
            $distance_km = $decoded->rows[0]->elements[0]->distance->text;
            $dis         = explode(" ", $distance_km);
            (float) $distance = $dis[0];
            (float) $distance_miles = $distance * 0.621371;
            $distance_miles = round($distance_miles, 2);
            $time           = $decoded->rows[0]->elements[0]->duration->text;
            $time_arr       = explode(" ", $time);
            $time_length    = sizeof($time_arr);
            if ($time_length <= 2) {
                if (strpos($time_arr[1], 'hour') !== FALSE) {
                    // time in hrs
                    $time_min = 60 * $time_arr[0];
                } else if (strpos($time_arr[1], 'min') !== FALSE) {
                    // time in mins
                    $time_min = $time_arr[0];
                }
            } else {
                // time is in hours and mins
                if (strpos($time_arr[1], 'hour') !== FALSE) {
                    // time in hrs
                    $time_min = 60 * $time_arr[0];
                }
                // time in mins
                $time_min += $time_arr[2];
            }
            $driver_id = $form_state['values']['driver_id'];
            if ($driver_id == 10) {
                $time_min = $time_min;
            } else {
                // We need 1/3 of total time
                $time_min = $time_min / 3;
            }
            // Cost calculation 
            
            if ($driver_id == 10) {
                // Hybrid driver: 4.99 minimum, 2.19 base, 1.30/mile, 0.26/ min
                if ($distance_miles <= 1) {
                    $cost = 4.99;
                } else {
                    $cost = 2.19 + (1.30 * $distance_miles) + (0.26 * $time_min);
                }
            } else if ($driver_id == 12) {
                // SUV Driver: 24.99 minimum, 14.99 base, 3.75/ mile, 0.90/ min
                if ($distance_miles <= 1) {
                    $cost = 24.99;
                } else {
                    $cost = 14.99 + (3.75 * $distance_miles) + (0.90 * $time_min);
                }
            } else {
                // Town driver: 14.99minimum, 7.99 base, 3.25/mile, 0.65/ min
                if ($distance_miles <= 1) {
                    $cost = 14.99;
                } else {
                    $cost = 7.99 + (3.25 * $distance_miles) + (0.65 * $time_min);
                }
            }
            $cost    = floor($cost);
            $message = "<dl><dt>" . $distance_miles . " miles</dt>";
            $message .= "<dt>" . $time . "</dt><dt> <strong>$ " . $cost . "</strong></dt></dl>";
            // $message = "Distance from Origin: ".$decoded->origin_addresses[0]." to Destination: ".$decoded->destination_addresses[0]." is ".$decoded->rows[0]->elements[0]->distance->text." And approximate time to reach will be ".$decoded->rows[0]->elements[0]->duration->text.".";
        }
    } else {
        $message = "Please fill both the fields.";
    }
    
    $element            = $form['estimated_cost'];
    $element['#markup'] = $message;
    return $element;
}

/**
 * Function that returns all available rides
 *
 * @pram string $cck
 *   The node type that you want to query..
 *
 * @param string $cck
 * @return array
 *   This returns all available rides as an array of objects
 */
function custom_pickup_test_cancel_ride()
{
    global $user;
    $nid  = $_POST['nid'];
    // echo $nid;
    $node = node_load($nid);
    if (isset($node->field_ride_event['und'][0]['tid']) || !isset($node)) {
        if ($node->field_ride_event['und'][0]['tid'] == 5) {
            add_role($role_name='Available',$node);
            remove_role('With customer',$node);
            //ride cancelled by driver so send alert to customer
            customerCancelAlert($nid);
        } else if ($node->field_ride_event['und'][0]['tid'] == 4) {
            //ride cancelled by customer
            $driver_id = $node->field_car_driver['und'][0]['target_id'];
            //commented because called in noti_test via rule set
            send_android_driver_cancel($nid, $driver_id);
        }
        echo $driver_id;
    } else {
        echo "error";
    }
    // node_delete($nid);
    die;
}
/*
* Called from noti_test to send android driver and nodejs driver notification
*/
function send_android_driver_cancel($entity_id, $driver_id)
{
    global $base_url;
    $node = node_load($entity_id);
    $user = user_load($driver_id);
    $subject = 'Ride Cancelled';
    $body = '<div><audio src="'.$base_url.'/beep.mp3" autoplay></audio><br>';
    $body .= '<span>This Ride has been cancelled.</span><a class="large button alert" href="/user">Go to Home page</a></div>';
    nodejs_send_user_message_multiple_custom($entity_id, $driver_id, $subject, $body);
    if ($user->field_user_device_id["und"][0]["value"] != '') {
        $deviceArr = $user->field_user_device_id["und"][0]["value"];
        $uid = $driver_id;
        $data = array(
            'entity_id' => $entity_id,
            'uid' => $uid,
            'device_id' => $deviceArr,
            'message' => 'Ride has been cancelled'
        );
        send_android_notification_cancel($data, $deviceArr);
    }
}

/*
* Send android notification
*/
function send_android_notification_cancel($data, $deviceArr)
{
    global $base_url;
    // Replace with real GCM browser / server API key from Google APIs
    $apiKey          = trim('AIzaSyBmtGl4EAaGwnJbB93wY-WanrjWhR8N7F8');
    $registrationIDs = array(
        $deviceArr
    );
    $url             = 'https://android.googleapis.com/gcm/send';
    $fields          = array(
        'registration_ids' => $registrationIDs,
        'data' => $data
    );
    // Set request headers (authentication and payload type)
    $headers         = array(
        'Authorization: key=' . $apiKey,
        'Content-Type: application/json'
    );
    
    // Open connection
    $ch = curl_init();
    // Set the url
    curl_setopt($ch, CURLOPT_URL, $url);
    // Set request method to POST
    curl_setopt($ch, CURLOPT_POST, true);
    // Set custom headers
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    // Get response back as string
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    // Set post data
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
    //echo 'Curl error: ' . curl_error($ch);
    // Send the request
    $result = curl_exec($ch);
    if (curl_error($ch)) {
        // echo $result;
    }
    // Close connection
    curl_close($ch);
    // Debug GCM response
    $result_data = json_decode($result);
    if ($result_data->success) {
        echo json_encode($result_data);
    } else {
        echo "error sending message to GCM Server";
    }
}

/*
*Called from rule set Cancel Pickup
*/
function noti_test()
{
    global $user;
    global $base_url;
    $nid  = arg(1);
    $node = node_load($nid);
// echo "<pre>";print_r($node);
    if (isset($node->field_ride_event['und'][0]['tid'])) {
        if ($node->field_ride_event['und'][0]['tid'] == 5) {
            add_role($role_name='Available',$node);
            remove_role('With customer',$node);
            //ride cancelled by driver so send alert to customer
            customerCancelAlert($nid);
        } else if ($node->field_ride_event['und'][0]['tid'] == 4) {
            //ride cancelled by customer
            $driver_id = $node->field_car_driver['und'][0]['target_id'];
            send_android_driver_cancel($nid, $driver_id);
        }
    }
    header('Location: '.$base_url);
die;
}

/**
 * Custom Cancel Alert Called from block
 */
function customerCancelAlert($entity_id)
{
    $node = node_load($entity_id);
    $uid = $node->uid;
    $uids[0] = $uid;
    $subject = 'Ride Cancelled';
    $body = '<div><audio src="https://www.chpride.com/beep.mp3" autoplay></audio>';
    $body .= '<span>Ride has been cancelled by driver.Please create a new ride.</span>';
    $body .= '<a class="large button alert reject" href="/node/add/ride-booker">' . t('New Ride') . '</a></div>';
    nodejs_send_user_message_multiple_custom($entity_id, $uids, $subject, $body);
    echo $entity_id;
}



function custom_pickup_available_rides($cck = 'ride_booker')
{
    $rides = db_query('
  SELECT
    node.nid,
    start_time.field_start_time_value,
    field_datageo_lat,
    field_datageo_lon
  FROM
    node
    left join field_data_field_car_driver as driver
      on driver.entity_id = node.nid
    join field_data_field_datageo as geo
      on geo.entity_id = node.nid
    join field_data_field_start_time as start_time
      on start_time.entity_id = node.nid
  WHERE
    driver.entity_id is null
  and
    node.type = :type', array(
        ':type' => $cck
    ))->fetchAll();
    return $rides;
}

/**
 * Generates a single accept ride button.
 *
 * @param int $uid
 *   The user (driver) that you want to generate the button for.
 * @return string
 */
function custom_pickup_content($uid = 0)
{
    global $base_url;
    $x       = 0;
    $content = '';
    
    $rides = custom_pickup_available_rides();
    $x     = count($rides);
    
    $content .= '<div>';
    while ($x > 0) {
        $x--;
        $content .= '<a class="large button success" href="/node/' . $rides[$x]->nid . '/accept">' . t('Pickup Ride at :date', array(
            ':date' => date("Y-m-d H:i:s", $rides[$x]->field_start_time_value)
        ));
        $content .= custom_pickup_drivers($rides[$x]->field_datageo_lat, $rides[$x]->field_datageo_lon);
        $content .= '</a>';
        $content .= '<br />';
        $content .= '<audio src="https://chpride.com/alert.mp3" autoplay></audio>';
        $content .= '<span class="large button alert reject" href="">' . t('Reject');
        $content .= '</span>';
    }
    $content .= '</div>';
    
    return $content;
}

/**
 * Determines if the request is in a taxi area.
 *
 * @param float $lat
 *   The latitude of the request.
 * @param float $lon
 *   The longitude of the request.
 *
 * @return array
 *   An array of the term IDs of the taxis that cover the location.
 */
function custom_pickup_taxi_area($lat, $lon)
{
    $taxi_area = db_query('
      SELECT DISTINCT
        entity_id "eid"
      FROM
        field_data_field_coverage_area
      WHERE
          entity_type LIKE :taxonomy
        AND
          bundle = :taxi_area
        AND
          field_coverage_area_left < :lon
        AND
          field_coverage_area_right > :lon
        AND
          field_coverage_area_top > :lat
        AND
          field_coverage_area_bottom < :lat
        ', array(
        ':taxonomy' => 'taxonomy_term',
        ':taxi_area' => 'taxi_area',
        ':lat' => $lat,
        ':lon' => $lon
    ))->fetchAll();
    return $taxi_area;
}

/**
 * Create a list of the available drivers for a ride.
 *
 * @param float|int $lat
 *   The latitude of the pickup request.
 * @param float|int $lon
 *   The longitude of the pickup request.
 * @param array $rid
 *   An array of int Role ID(s) of the drivers you are looking for. (rid 4 is town car driver)
 *
 * @return string
 *   The HTML to embed in a page or block.
 */
function custom_pickup_drivers($lat = 0, $lon = 0, $rid = array(4, 11))
{
    
    $x       = 0;
    $content = '';
    $drivers = db_query('
  select
    profile.uid,
    entity_id,
    sqrt( power((field_car_location_lat - :lat ) ,2)  + power((field_car_location_lon - :lon) ,2)) * 69  as distance
  from
    field_data_field_car_location
    join profile
      on profile.pid = field_data_field_car_location.entity_id
    join users_roles
      on users_roles.uid = profile.uid
  where
    profile.uid
      IN
        (select uid from users_roles where rid = 8)
  AND
    users_roles.rid IN (:rid)
  order by
    distance desc', array(
        ':lat' => $lat,
        ':lon' => $lon,
        ':rid' => $rid
    ))->fetchAll();
    
    $x = count($drivers);
    while ($x > 0) {
        $x--;
        $content .= '<div class="driver-' . $drivers[$x]->uid . '" >';
        $content .= t('Driver :uid is :distance miles away.', array(
            ':uid' => $drivers[$x]->uid,
            ':distance' => number_format($drivers[$x]->distance, 2)
        ));
        $content .= '</div>';
    }
    return $content;
}

/**
 * Print out the get ride and cancel buttons.
 *
 * @param $nid
 * @param $distance
 * @param int $bounty
 * @param null $start_time
 * @param $driver
 * @internal param $drivers
 * @return string
 * @internal param $
 */
function custom_pickup_alert_button($nid, $distance, $bounty = 0, $start_time = NULL, $driver = -1)
{
    
    global $base_url;
    $content = '<a class="button success" href="/node/' . $nid . '/accept">' . t('Accept');
    if ($start_time != NULL) {
        $content .= date("H:i:s", $start_time) . '<br />';
    }
    $content .= t('The Pickup is :distance miles away', array(
        ':distance' => number_format($distance, 2)
    ));
    $content .= '<audio src="https://chpride.com/alert.mp3"  autoplay></audio>';
    if ($bounty > 0) {
        $content .= '<h2>' . t('Bounty of $') . $bounty . '.</h2>';
    }
    $content .= '</a>';
    $content .= '<br /><br /><br /><br /><br /><br />';
    $content .= '<a class="large button alert reject" href="">' . t('Reject');
    $content .= '</a>';
    return $content;
}

/**
 * Finds the next driver to send an alert to and sends the alert via nodejs.
 *
 * @param int $nid
 *   The node ID.
 * @param int $uid
 *   The user ID.
 * @param array|int $rid
 *   The role ID -- this might need to be reworked.
 *
 * @return NULL
 *   Errors are discarded.
 */
function custom_pickup_driver_alert($nid = 0, $uid = 1, $rid = array(8))
{
    
    $path      = '/' . drupal_get_path('module', 'custom_pickup');
    $key       = 'vUKtuYvHt3yT8CDBVu3QHq6IB92MwL6w'; // this should be grabbed from a config
    $node_type = array(
        'ride_booker'
    );
    
    $rides = db_query('
  SELECT
    node.nid,
    node.uid,
    start_time.field_start_time_value,
    field_datageo_lat,
    field_datageo_lon
  FROM
    {node} node
    left join field_data_field_car_driver as driver
      on driver.entity_id = node.nid
    left join field_data_field_ride_event as ride_event
      on ride_event.entity_id = node.nid
    join field_data_field_datageo as geo
      on geo.entity_id = node.nid
    join field_data_field_start_time as start_time
      on start_time.entity_id = node.nid
  WHERE
    (driver.entity_id is null OR field_ride_event_tid = 5)
  and
    node.nid = :nid
  and
    ( field_ride_event_tid is NULL OR
    field_ride_event_tid != 4 )
  and
    node.type IN (:type)', array(
        ':type' => $node_type,
        ':nid' => $nid
    ))->fetchAll();
    if (count($rides) === 0) {
        return;
    }
    $lat        = $rides[0]->field_datageo_lat;
    $lon        = $rides[0]->field_datageo_lon;
    $message_id = 'ride' . $nid;
    
    if (isset($rides[0]->field_start_time_value)) {
        $now            = time();
        $time_to_pickup = $rides[0]->field_start_time_value - $now;
        if ($time_to_pickup > (5 * 60)) {
            $delay = 1000 * ($time_to_pickup - (5 * 60));
        } else {
            $delay = 15000;
        }
    } else {
        $delay = 15000; // delay is 15 seconds by default this should be set by getting the scheduled time
    }
    $x    = 0;
    $node = node_load($nid);
    if ($node->field_car_type['und'][0]['tid'] == '10') {
        $driver_role = 11;
    } else if ($node->field_car_type['und'][0]['tid'] == '11') {
        $driver_role = 4;
    } else if ($node->field_car_type['und'][0]['tid'] == '12') {
        $driver_role = 13;
    }
    $drivers = db_query('
  SELECT
    profile.uid,
    entity_id,
    sqrt( power((field_car_location_lat - :lat ) ,2)  + power((field_car_location_lon - :lon) ,2)) * 69  AS distance
  FROM
    field_data_field_car_location
    JOIN profile
      ON profile.pid = field_data_field_car_location.entity_id
    JOIN users_roles users_roles_0
      ON users_roles_0.uid = profile.uid
    JOIN users_roles users_roles_1
      ON users_roles_1.uid = profile.uid
  WHERE
    users_roles_0.rid = :rid
  AND 
    users_roles_1.rid = :rid1
  AND
    profile.uid IN (SELECT uid FROM users_roles WHERE rid = 8)
  ORDER BY
    distance ASC', array(
        ':lat' => $lat,
        ':lon' => $lon,
        ':rid' => $rid[0],
        ':rid1' => $driver_role
    ))->fetchAll();
    
    $now = strtotime("now");
    if (!($node->field_start_time['und'][0]['value'] > $now)) {
        //When Get me now
        //toremove
      //  echo "<pre>";print_r($rides);echo "</pre>";
        //echo "<pre>";print_r($drivers);echo "</pre>";die;
        send_native_driver($rides, $drivers);
    } else {
        //When Schedule for later no alert should be sent
        return;
    }
    $x = count($drivers);
    // echo "<pre>";print_r($drivers);
     //die;
    if ($x === 0) {
        
        $uid     = $rides[0]->uid;
        $subject = t("No drivers");
        $body    = t('We are sorry for the inconvience, Do you want to cancel or wait?'); // TODO: add cancel function.
        
        // require_once DRUPAL_ROOT.$path.'/calback.php';
        $callback = DRUPAL_ROOT . $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=8&key=' . $key;
        $delay    = 60000;
        //nodejs_send_user_message($uid, $subject, $body, $callback, $delay);
        nodejs_send_user_message_multiple_custom($nid, $uid, $subject, $body);
        // TODO: add a GCM hook,
        
        return;
    } elseif ($x === 1) {
        $distance   = $drivers[0]->distance;
        $bounty     = 0;
        $start_time = NULL;
        $driver     = -1;
        $uid        = $drivers[0]->uid;
        $content    = '';
        $content .= custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $driver);
        $body     = $content;
        $subject  = t('Customer Pickup');
        $callback = DRUPAL_ROOT . $path . '/callback.php?nid=' . $nid . '&uid=' . $uid . '&rid=' . $rid[0] . '&key=' . $key;


       /* echo "<pre>";print_r($body);
        echo "<pre>";print_r($callback);
        echo "<pre>NID: ";print_r($nid);
        echo "<pre>UID: ";print_r($uid);
        die;*/
        nodejs_send_user_message_multiple_custom($nid, $uid, $subject, $body);
        // TO DO: add a GCM hook.
        
        return;
    } else {
        $distance   = $drivers[0]->distance;
        $bounty     = 0;
        $start_time = NULL;
        $count      = 1000;
        $subject    = t('Customer Pickup');
        $content    = '';
        $content .= custom_pickup_alert_button($nid, $distance, $bounty, $start_time, $drivers);
        $body = $content;
        for ($i = 0; $i < count($drivers); $i++) {
            $uids[$i] = $drivers[$i]->uid;
        }
        nodejs_send_user_message_multiple_custom($nid, $uids, $subject, $body);
    }
    return;
}

/**
 * Display output
 *
 * @return string
 *   Returns a single alert suitable for ajax.
 */
function custom_pickup_output()
{
    global $user;
    $uid = $user->uid;
    
    header('Content-type: text/plain; charset=UTF-8');
    header('Content-Disposition: inline');
    $content = custom_pickup_content($uid);
    return $content;
}

/**
 * function to return customer location
 * called from script.js
 **/
function custom_pickup_get_customer_loc()
{
    global $user;
    $nid  = $_POST['nid'];
    $node = node_load($nid);
    if ($node->type == 'ride_booker') {
        $lat = $node->field_geoloc['und'][0]['lat'];
        $lon = $node->field_geoloc['und'][0]['lng'];
        echo json_encode(array(
            "lat" => $lat,
            "lon" => $lon
        ));
    } else {
        echo "error";
        die;
    }
}

/**
 * function to return all drivers' location
 * called from script.js
 **/
function custom_pickup_get_driver_loc()
{
    global $user;
    $query = db_select('profile', 'p');
    $query->join('field_data_field_car_location', 'f', 'p.pid = f.entity_id');
    $query->join('users', 'u', 'p.uid = u.uid');
    $query->join('users_roles', 'r1', 'u.uid = r1.uid and r1.rid = 4');
    $query->join('users_roles', 'r2', 'u.uid = r2.uid  and r2.rid = 7');
    $query->join('users_roles', 'r3', 'u.uid = r3.uid  and r3.rid = 8');
    $query->fields('p', array('pid'))
        ->fields('u', array('name'))
        ->fields('f', array('field_car_location_wkt'))
        ->condition('p.type', 'driver')
        ->condition('r1.rid', '4')
        ->condition('r2.rid', '7')
        ->condition('r3.rid', '8');
    $result = $query->execute();
    $driver_array = array();
    while ($record = $result->fetchAssoc()) {
        $temp_arr  = explode('(', $record['field_car_location_wkt']);
        $loc_array = array();
        if ($temp_arr[1]) {
            $temp_arr[1] = str_replace(')', '', $temp_arr[1]);
            $loc_array   = explode(' ', $temp_arr[1]);
        }
        $driver_array[$record['name']] = $loc_array;
    }
    echo json_encode($driver_array);
}
function send_native_driver($rides, $drivers)
{
    $node = node_load($rides[0]->nid);
    if (isset($node->field_deny_by_driver['und'])) {
        $uids = explode(',', $node->field_deny_by_driver['und'][0]['value']);
        for ($i = 0; $i < count($uids); $i++) {
            $uidArr[$i] = $uids[$i];
        }
    } else {
        $uidArr = array();
    }
    for ($i = 0; $i < count($drivers); $i++) {
        
        $user = user_load($drivers[$i]->uid);
        if ($user->field_user_device_id["und"][0]["value"] != '' && isset($user->roles[7]) && isset($user->roles[8]) && !in_array($user->uid, $uidArr)) {
            /*echo "<pre>rides";print_r($rides);echo "</pre>";
            echo "<pre>drivers";print_r($drivers);echo "</pre>";
            echo "<pre>divice id";print_r($user->field_user_device_id["und"][0]["value"]);echo "</pre>";
            echo "<pre>$i = ";print_r($i);echo "</pre>";
            */// echo "<pre>";print_r($rides);echo "</pre>";
            $entity_id     = $rides[0]->nid;
            $deviceArr[$i] = $user->field_user_device_id["und"][0]["value"];
            $distance[$i]  = $drivers[$i]->distance;
            $uidArr[$i]    = $drivers[$i]->uid;
            //TODO: either send android notification or iPhone notification as only one device should login at one time
            send_android_notification($uidArr[$i], $entity_id, $distance[$i], $deviceArr[$i]);
            send_ios_notification($uidArr[$i], $entity_id, $distance[$i], $deviceArr[$i]);
            $i = count($drivers);
        }
    }
}

function send_ios_notification($uid, $entity_id, $distance, $deviceToken) {
    // Payload data to be sent
    //$uid = arg(1);
    //$entity_id = arg(2);
    //$distance = arg(3);
    //$deviceToken = arg(4);
    // Put your private key's passphrase here:
    $passphrase = '';
    // Payload data to be sent
    $message = array(
        'entity_id' => $entity_id,
        'uid' => $uid,
        'device_id' => $deviceToken,
        'distance' => $distance
    );
    ////////////////////////////////////////////////////////////////////////////////
    $ctx = stream_context_create();
    stream_context_set_option($ctx, 'ssl', 'local_cert', 'CheapRideDriverPushNotification.pem');
    stream_context_set_option($ctx, 'ssl', 'passphrase', $passphrase);
    // Open a connection to the APNS server
    $fp = stream_socket_client('ssl://gateway.sandbox.push.apple.com:2195', $err, $errstr, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx);
    // $fp = stream_socket_client('ssl://gateway.push.apple.com:2195', $err, $errstr, 60, STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT, $ctx);
    if (!$fp)
        exit("Failed to connect: $err $errstr" . PHP_EOL);
    echo 'Connected to APNS' . PHP_EOL;
    // Create the payload body|

    $body['aps'] = array(
        'alert' => array(
            'body' => 'Ride has been created'
        ),
        'badge' => 1,
        'action-loc-key' => 'Cheap Rides',
        'sound' => 'alert.mp3',
        'data' => json_encode($message),
        'category' => 'ride_booker'
        );
    // echo "<pre>";print_r($body);echo "</pre>";die;
    // Encode the payload as JSON
    $payload = json_encode($body);
    // Build the binary notification
    $msg = chr(0) . pack('n', 32) . pack('H*', $deviceToken) . pack('n', strlen($payload)) . $payload;
    // Send it to the server
    $result = fwrite($fp, $msg, strlen($msg));
    if (!$result){
        echo 'Message not delivered' . PHP_EOL;
    }
    else {
        echo 'Message successfully delivered' . PHP_EOL;
    }
    // Close the connection to the server
    fclose($fp);
}

function send_android_notification($uid, $entity_id, $distance, $deviceArr)
{
    global $base_url;
    // Replace with real GCM browser / server API key from Google APIs
    $apiKey = trim('AIzaSyBmtGl4EAaGwnJbB93wY-WanrjWhR8N7F8');
    
    
    $registrationIDs = array(
        $deviceArr
    );
    // Payload data to be sent
    $data            = array(
        'entity_id' => $entity_id,
        'uid' => $uid,
        'device_id' => $deviceArr,
        'distance' => $distance
    );
    // Set request URL to GCM endpoint
    $url             = 'https://android.googleapis.com/gcm/send';
    
    // Set POST variables (device IDs and payload)
    $fields = array(
        'registration_ids' => $registrationIDs,
        'data' => $data
    );
    
    // Set request headers (authentication and payload type)
    $headers = array(
        'Authorization: key=' . $apiKey,
        'Content-Type: application/json'
    );
    
    // Open connection
    $ch = curl_init();
    
    // Set the url
    curl_setopt($ch, CURLOPT_URL, $url);
    
    // Set request method to POST
    curl_setopt($ch, CURLOPT_POST, true);
    
    // Set custom headers
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    
    // Get response back as string
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    
    // Set post data
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($fields));
    //echo 'Curl error: ' . curl_error($ch);
    // Send the request
    $result = curl_exec($ch);
    if (curl_error($ch)) {
        echo $result;
    }
    // Close connection
    curl_close($ch);
    
    // Debug GCM response
    $result_data = json_decode($result);
    
    if ($result_data->success) {
        echo json_encode($data);
    }
}
function editschedule()
{
    global $user;
    $picdate = $_POST['field_start_time']['und'][0]['value']['day'] . "-" . $_POST['field_start_time']['und'][0]['value']['month'] . "-" . $_POST['field_start_time']['und'][0]['value']['year'];
    $pictime = $_POST['field_start_time']['und'][0]['value']['hour'] . ":" . $_POST['field_start_time']['und'][0]['value']['minute'] . " " . $_POST['field_start_time']['und'][0]['value']['ampm'];
    
    $hours    = sprintf('%02d', (int) $_POST['field_start_time']['und'][0]['value']['hour']);
    $minutes  = sprintf('%02d', (int) $_POST['field_start_time']['und'][0]['value']['minute']);
    $meridiem = (strtolower($_POST['field_start_time']['und'][0]['value']['ampm']) == 'am') ? 'am' : 'pm';
    echo $newDate = date('H:i', strtotime("{$hours}:{$minutes} {$meridiem}"));
    
    $convrtd                                   = strtotime($picdate . ", " . $newDate);
    $nid                                       = $_POST['field_start_time']['und'][0]['value']['nid'];
    $node                                      = node_load($nid);
    $node->nid                                 = $nid;
    $node->field_start_time['und'][0]['value'] = $convrtd;
    
    node_save($node);
    drupal_goto('user/' . $user->uid . '/my-scheduled-rides');
    die;
}
function deleteschedule($nid)
{
    global $user;
    node_delete(arg(1));
    echo '/user/' . $user->uid . '/my-scheduled-rides';
    die;
    
}
function sendNotification($apiKey, $registrationIdsArray, $messageData)
{
    $headers = array(
        "Content-Type:" . "application/json",
        "Authorization:" . "key=" . $apiKey
    );
    $data    = array(
        'data' => $messageData,
        'registration_ids' => $registrationIdsArray
    );
    
    $ch = curl_init();
    
    curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_URL, "https://android.googleapis.com/gcm/send");
    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    
    $response = curl_exec($ch);
    if ($response === FALSE) {
        die('Curl failed: ' . curl_error($ch));
    }
    if (curl_error($ch)) {
        return $response;
    }
    curl_close($ch);
    
    return $response;
}
/*
 * Calculate Time to reach Driver
 *
 */
function getEstimatedTime()
{
    $rid     = array(
        8
    );
    $role_id = 0;
    $lat     = $lon = 0;
    $lat     = $_POST['lat'];
    $lon     = $_POST['lon'];
    $role_id = $_POST['roleid'];
    if ($role_id == '10') {
        $driver_role = 11;
    } else if ($role_id == '12') {
        $driver_role = 13;
    } else {
        $driver_role = 4;
    }
    $content  = '';
    $hour     = $minute = $distance = $time = $filterHr = $filterMin = $seconds = 0;
    $drivers  = db_query('SELECT Distinct
    profile.uid,
    entity_id,
    sqrt( power((field_car_location_lat - :lat ) ,2)  + power((field_car_location_lon - :lon) ,2)) * 69  AS distance
  FROM
    field_data_field_car_location
    JOIN profile
      ON profile.pid = field_data_field_car_location.entity_id
    JOIN users_roles users_roles_0
      ON users_roles_0.uid = profile.uid
    JOIN users_roles users_roles_1
      ON users_roles_1.uid = profile.uid
  WHERE
    users_roles_0.rid = :rid
     AND 
    users_roles_1.rid = :rid1
  AND
    profile.uid IN (SELECT uid FROM users_roles WHERE rid = 8)
  ORDER BY
    distance ASC', array(
        ':lat' => $lat,
        ':lon' => $lon,
        ':rid' => $rid[0],
        ':rid1' => $driver_role
    ))->fetchAll();
    $distance = $drivers[0]->distance;
    $distance = round($distance, 2);
    if ($distance > 0) {
        // time in seconds
        $time = 120 * $distance;
        if ($time > 60) {
            if ($time > 3600) {
                $filterHr = $time / 3600;
                $hour     = intval($filterHr);
                
            }
            $filterMin = $time / 60;
            $minute    = intval($filterMin - ($hour * 60));
            
            $seconds = intval($time - (($hour * 3600) + ($minute * 60)));
            
        } else {
            $seconds = round($time);
            
        }
        if ($seconds > 10) {
            $minute += 1;
        }
        if ($minute > 0 || $hour > 0) {
            if (($minute > 0) && ($hour < 1)) {
                $content .= "<p style='padding:17px 0 0;'>Car-<br>";
            } else {
                $content .= "<p>Car-<br>";
            }
            
            if ($hour > 0) {
                $content .= $hour . "Hr ";
            }
            if ($minute > 0) {
                $content .= $minute . "Min ";
            }
            
            $content .= "</p>";
        } else {
            $content = "<p style='padding:25px 0 0;'>Wait...</p>";
        }
    } else {
        $content = "<p style='padding:17px 0 0;'>Car-<br>0 Min</p>";
    }
    echo $content;
    exit;
}